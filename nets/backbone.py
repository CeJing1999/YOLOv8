import torch

from torch import nn

from nets.common import Conv, C2f, SPPF


class Backbone(nn.Module):
    def __init__(self, base_channels: int = 64, base_depth: int = 3, c_: int = 8):
        super(Backbone, self).__init__()
        # -----------------------------------------------#
        #   输入图片是640, 640, 3
        #   初始的基本通道base_channels是64
        #   初始的基本深度base_depth是3
        # -----------------------------------------------#

        # -----------------------------------------------#
        #   完成卷积之后，640, 640, 3 -> 320, 320, 64
        # -----------------------------------------------#
        self.conv_1 = Conv(ch_in=3, ch_out=base_channels, k=3, s=2, p=1)

        # -----------------------------------------------#
        #   完成卷积之后，320, 320, 64 -> 160, 160, 128
        # -----------------------------------------------#
        self.conv_2 = Conv(ch_in=base_channels, ch_out=base_channels * 2, k=3, s=2, p=1)

        # -----------------------------------------------#
        #   完成C2f之后，160, 160, 128 -> 160, 160, 128
        # -----------------------------------------------#
        self.c2f_1 = C2f(ch_in=base_channels * 2, ch_out=base_channels * 2, n=base_depth, shortcut=True)

        # -----------------------------------------------#
        #   完成卷积之后，160, 160, 128 -> 80, 80, 256
        # -----------------------------------------------#
        self.conv_3 = Conv(ch_in=base_channels * 2, ch_out=base_channels * 4, k=3, s=2, p=1)

        # -----------------------------------------------#
        #   完成C2f之后，80, 80, 256 -> 80, 80, 256
        # -----------------------------------------------#
        self.c2f_2 = C2f(ch_in=base_channels * 4, ch_out=base_channels * 4, n=base_depth * 2, shortcut=True)

        # -----------------------------------------------#
        #   完成卷积之后，80, 80, 256 -> 40, 40, 512
        # -----------------------------------------------#
        self.conv_4 = Conv(ch_in=base_channels * 4, ch_out=base_channels * 8, k=3, s=2, p=1)

        # -----------------------------------------------#
        #   完成C2f之后，40, 40, 512 -> 40, 40, 512
        # -----------------------------------------------#
        self.c2f_3 = C2f(ch_in=base_channels * 8, ch_out=base_channels * 8, n=base_depth * 2, shortcut=True)

        # -----------------------------------------------#
        #   完成卷积之后, 40, 40, 512 -> 20, 20, 512
        # -----------------------------------------------#
        self.conv_5 = Conv(ch_in=base_channels * 8, ch_out=base_channels * c_, k=3, s=2, p=1)

        # -----------------------------------------------#
        #   完成C2f之后，20, 20, 512 -> 20, 20, 512
        # -----------------------------------------------#
        self.c2f_4 = C2f(ch_in=base_channels * c_, ch_out=base_channels * c_, n=base_depth, shortcut=True)

        # -----------------------------------------------#
        #   完成SPPF之后，20, 20, 512 -> 20, 20, 512
        # -----------------------------------------------#
        self.sppf = SPPF(ch_in=base_channels * c_, ch_out=base_channels * c_)

    def forward(self, x: torch.Tensor):
        # -----------------------------------------------#
        #   conv_1的输出为320, 320, 64
        # -----------------------------------------------#
        x = self.conv_1(x)
        # -----------------------------------------------#
        #   conv_2的输出为160, 160, 128
        # -----------------------------------------------#
        x = self.conv_2(x)
        # -----------------------------------------------#
        #   c2f_1的输出为160, 160, 128
        # -----------------------------------------------#
        x = self.c2f_1(x)
        # -----------------------------------------------#
        #   conv_3的输出为80, 80, 256
        # -----------------------------------------------#
        x = self.conv_3(x)
        # -----------------------------------------------#
        #   c2f_2的输出为80, 80, 256，是一个有效特征层
        # -----------------------------------------------#
        x = self.c2f_2(x)
        feat1 = x
        # -----------------------------------------------#
        #   conv_4的输出为40, 40, 512
        # -----------------------------------------------#
        x = self.conv_4(x)
        # -----------------------------------------------#
        #   c2f_3的输出为40, 40, 512，是一个有效特征层
        # -----------------------------------------------#
        x = self.c2f_3(x)
        feat2 = x
        # -----------------------------------------------#
        #   conv_5的输出为20, 20, 512
        # -----------------------------------------------#
        x = self.conv_5(x)
        # -----------------------------------------------#
        #   c2f_4的输出为20, 20, 512
        # -----------------------------------------------#
        x = self.c2f_4(x)
        # -----------------------------------------------#
        #   sppf的输出为20, 20, 512，是一个有效特征层
        # -----------------------------------------------#
        x = self.sppf(x)
        feat3 = x

        return feat1, feat2, feat3
